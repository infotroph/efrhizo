Starting current_2012_s5 on  Fri Jun 23 19:52:43 UTC 2017
Running mctd_foursurf.R for year  2012  session  5
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.15.1, packaged: 2017-04-19 05:03:57 UTC, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
R version 3.3.2 (2016-10-31)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X El Capitan 10.11.6

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  base     

other attached packages:
[1] rstan_2.15.1         StanHeaders_2.15.0-1 ggplot2_2.2.1       

loaded via a namespace (and not attached):
 [1] colorspace_1.3-2 scales_0.4.1     lazyeval_0.2.0   plyr_1.8.4      
 [5] inline_0.3.14    gtable_0.2.0     tibble_1.3.3     gridExtra_2.2.1 
 [9] Rcpp_0.12.11     grid_3.3.2       methods_3.3.2    stats4_3.3.2    
[13] rlang_0.1.1      munsell_0.4.3   
structure(list(Tube = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 
11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 
24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 
37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 
51L, 57L, 58L, 59L, 60L, 61L, 63L, 64L, 69L, 70L, 71L, 72L, 81L, 
82L, 83L, 84L, 85L, 86L, 87L, 88L, 93L, 94L, 95L, 96L), Tube_alias = 1:73), .Names = c("Tube", 
"Tube_alias"), row.names = c(NA, -73L), class = "data.frame")
   Tube Tube_alias
1     1          1
2     2          2
3     3          3
4     4          4
5     5          5
6     6          6
7     7          7
8     8          8
9     9          9
10   10         10
11   11         11
12   12         12
13   13         13
14   14         14
15   15         15
16   16         16
17   17         17
18   18         18
19   19         19
20   20         20
21   21         21
22   22         22
23   23         23
24   24         24
25   25         25
26   26         26
27   27         27
28   28         28
29   29         29
30   30         30
31   31         31
32   32         32
33   33         33
34   34         34
35   35         35
36   36         36
37   37         37
38   38         38
39   39         39
40   40         40
41   41         41
42   42         42
43   43         43
44   44         44
45   45         45
46   46         46
47   47         47
48   48         48
49   49         49
50   51         50
51   57         51
52   58         52
53   59         53
54   60         54
55   61         55
56   63         56
57   64         57
58   69         58
59   70         59
60   71         60
61   72         61
62   81         62
63   82         63
64   83         64
65   84         65
66   85         66
67   86         67
68   87         68
69   88         69
70   93         70
71   94         71
72   95         72
73   96         73
[1] "Using data from 2012 , session 5"
[1] "Crop name-to-number key:"
              num          name first_tube last_tube first_tube_alias
Maize-Soybean   1 Maize-Soybean          1        24                1
Switchgrass     2   Switchgrass         49        72               49
Miscanthus      3    Miscanthus         25        48               25
Prairie         4       Prairie         81        96               62
              last_tube_alias n_tubes
Maize-Soybean              24      24
Switchgrass                61      13
Miscanthus                 48      24
Prairie                    73      12
[1] "conditions for predicted data:"
   tube depth       Species
1     1     1   Switchgrass
2     2     1    Miscanthus
3     3     1       Prairie
4     4     1 Maize-Soybean
5     1     8   Switchgrass
6     2     8    Miscanthus
7     3     8       Prairie
8     4     8 Maize-Soybean
9     1    15   Switchgrass
10    2    15    Miscanthus
11    3    15       Prairie
12    4    15 Maize-Soybean
13    1    21   Switchgrass
14    2    21    Miscanthus
15    3    21       Prairie
16    4    21 Maize-Soybean
17    1    28   Switchgrass
18    2    28    Miscanthus
19    3    28       Prairie
20    4    28 Maize-Soybean
21    1    35   Switchgrass
22    2    35    Miscanthus
23    3    35       Prairie
24    4    35 Maize-Soybean
25    1    42   Switchgrass
26    2    42    Miscanthus
27    3    42       Prairie
28    4    42 Maize-Soybean
29    1    49   Switchgrass
30    2    49    Miscanthus
31    3    49       Prairie
32    4    49 Maize-Soybean
33    1    55   Switchgrass
34    2    55    Miscanthus
35    3    55       Prairie
36    4    55 Maize-Soybean
37    1    62   Switchgrass
38    2    62    Miscanthus
39    3    62       Prairie
40    4    62 Maize-Soybean
41    1    69   Switchgrass
42    2    69    Miscanthus
43    3    69       Prairie
44    4    69 Maize-Soybean
45    1    76   Switchgrass
46    2    76    Miscanthus
47    3    76       Prairie
48    4    76 Maize-Soybean
49    1    82   Switchgrass
50    2    82    Miscanthus
51    3    82       Prairie
52    4    82 Maize-Soybean
53    1    89   Switchgrass
54    2    89    Miscanthus
55    3    89       Prairie
56    4    89 Maize-Soybean
57    1    96   Switchgrass
58    2    96    Miscanthus
59    3    96       Prairie
60    4    96 Maize-Soybean
61    1   103   Switchgrass
62    2   103    Miscanthus
63    3   103       Prairie
64    4   103 Maize-Soybean
65    1   110   Switchgrass
66    2   110    Miscanthus
67    3   110       Prairie
68    4   110 Maize-Soybean
69    1   116   Switchgrass
70    2   116    Miscanthus
71    3   116       Prairie
72    4   116 Maize-Soybean
73    1   123   Switchgrass
74    2   123    Miscanthus
75    3   123       Prairie
76    4   123 Maize-Soybean
77    1   130   Switchgrass
78    2   130    Miscanthus
79    3   130       Prairie
80    4   130 Maize-Soybean

TRANSLATING MODEL 'mctd_foursurf' FROM Stan CODE TO C++ CODE NOW.
successful in parsing the Stan model 'mctd_foursurf'.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 5).

Chain 5, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 5, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 5, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 5, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 5, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 5, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 5, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 5, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 5, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 5, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 5, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 39.3089 seconds (Warm-up)
               136.745 seconds (Sampling)
               176.054 seconds (Total)

The following numerical problems occurred the indicated number of times on chain 1
                                                                                             count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!      4
Exception thrown at line 139: lognormal_log: Scale parameter[2] is inf, but must be finite!      2
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                 1
Exception thrown at line 139: lognormal_log: Scale parameter[74] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, there is no need to ask about this message on stan-users.

Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 39.597 seconds (Warm-up)
               136.567 seconds (Sampling)
               176.164 seconds (Total)

The following numerical problems occurred the indicated number of times on chain 4
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     6
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
Exception thrown at line 139: lognormal_log: Scale parameter[2] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, there is no need to ask about this message on stan-users.

Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 41.3157 seconds (Warm-up)
               135.951 seconds (Sampling)
               177.267 seconds (Total)

The following numerical problems occurred the indicated number of times on chain 2
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[2] is inf, but must be finite!     8
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     2
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, there is no need to ask about this message on stan-users.

Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 40.901 seconds (Warm-up)
               136.596 seconds (Sampling)
               177.497 seconds (Total)

The following numerical problems occurred the indicated number of times on chain 3
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     5
Exception thrown at line 139: lognormal_log: Scale parameter[2] is inf, but must be finite!     3
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, there is no need to ask about this message on stan-users.

Chain 5, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 41.5494 seconds (Warm-up)
               135.89 seconds (Sampling)
               177.439 seconds (Total)

The following numerical problems occurred the indicated number of times on chain 5
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[2] is inf, but must be finite!     5
Exception thrown at line 139: lognormal_log: Scale parameter[1] is 0, but must be > 0!          1
Exception thrown at line 139: lognormal_log: Scale parameter[5] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, there is no need to ask about this message on stan-users.
NULL
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                        mean se_mean   sd     2.5%      25%      50%      75%
loc_detect             -6.89    0.00 0.17    -7.24    -6.99    -6.88    -6.77
scale_detect            1.10    0.00 0.16     0.83     0.99     1.09     1.20
loc_surface[1]         17.54    0.04 4.10     9.97    14.72    17.36    20.16
loc_surface[2]         25.15    0.06 6.79    10.30    20.99    25.62    29.82
loc_surface[3]         18.37    0.06 7.42     2.84    13.72    18.75    23.46
loc_surface[4]         18.75    0.04 4.95     8.94    15.54    18.75    21.98
scale_surface[1]        5.02    0.01 1.67     2.24     3.85     4.84     5.98
scale_surface[2]        7.78    0.01 1.90     4.83     6.46     7.51     8.80
scale_surface[3]        8.78    0.02 2.38     4.82     7.15     8.52    10.14
scale_surface[4]        6.25    0.01 1.84     3.49     4.95     5.97     7.21
intercept[1]           -5.28    0.00 0.17    -5.61    -5.39    -5.28    -5.16
intercept[2]           -4.88    0.00 0.24    -5.35    -5.04    -4.88    -4.73
intercept[3]           -6.00    0.00 0.19    -6.37    -6.12    -6.00    -5.88
intercept[4]           -5.66    0.00 0.24    -6.12    -5.82    -5.66    -5.50
b_depth[1]              0.36    0.00 0.21    -0.06     0.23     0.37     0.50
b_depth[2]             -0.36    0.00 0.33    -1.02    -0.57    -0.35    -0.13
b_depth[3]             -0.38    0.00 0.25    -0.90    -0.55    -0.37    -0.21
b_depth[4]             -0.70    0.00 0.24    -1.19    -0.86    -0.69    -0.54
sig_tube                0.70    0.00 0.08     0.55     0.64     0.70     0.76
sigma[1]                1.69    0.00 0.07     1.56     1.64     1.69     1.73
sigma[2]                1.64    0.00 0.08     1.49     1.58     1.64     1.69
sigma[3]                2.01    0.00 0.09     1.84     1.95     2.00     2.06
sigma[4]                1.52    0.00 0.08     1.37     1.46     1.52     1.57
crop_tot[1]             0.65    0.00 0.11     0.46     0.57     0.64     0.72
crop_tot[2]             1.33    0.01 0.81     0.65     0.93     1.16     1.49
crop_tot[3]             0.41    0.00 0.15     0.24     0.32     0.38     0.46
crop_tot[4]             0.80    0.00 0.41     0.38     0.56     0.70     0.93
crop_tot_diff[1]        0.68    0.01 0.82    -0.06     0.28     0.52     0.86
crop_tot_diff[2]       -0.24    0.00 0.19    -0.56    -0.35    -0.25    -0.15
crop_tot_diff[3]        0.16    0.00 0.43    -0.36    -0.10     0.07     0.30
crop_int_diff[1]        0.39    0.00 0.29    -0.18     0.20     0.39     0.59
crop_int_diff[2]       -0.73    0.00 0.25    -1.22    -0.89    -0.72    -0.56
crop_int_diff[3]       -0.38    0.00 0.29    -0.96    -0.58    -0.38    -0.19
crop_bdepth_diff[1]    -0.72    0.00 0.39    -1.48    -0.98    -0.71    -0.45
crop_bdepth_diff[2]    -0.75    0.00 0.32    -1.40    -0.96    -0.74    -0.53
crop_bdepth_diff[3]    -1.06    0.00 0.31    -1.68    -1.27    -1.06    -0.85
lp__                -1921.69    0.12 8.37 -1938.78 -1927.21 -1921.31 -1915.91
                       97.5% n_eff Rhat
loc_detect             -6.58  8258    1
scale_detect            1.45  7476    1
loc_surface[1]         25.92 12955    1
loc_surface[2]         37.25 15236    1
loc_surface[3]         31.99 13188    1
loc_surface[4]         28.54 17637    1
scale_surface[1]        8.89 20000    1
scale_surface[2]       12.30 20000    1
scale_surface[3]       14.18 20000    1
scale_surface[4]       10.65 20000    1
intercept[1]           -4.94  6773    1
intercept[2]           -4.41  6554    1
intercept[3]           -5.64  8013    1
intercept[4]           -5.20  5828    1
b_depth[1]              0.75 14621    1
b_depth[2]              0.25 15738    1
b_depth[3]              0.06 14666    1
b_depth[4]             -0.26 20000    1
sig_tube                0.88 10285    1
sigma[1]                1.83 20000    1
sigma[2]                1.81 20000    1
sigma[3]                2.18 20000    1
sigma[4]                1.68 20000    1
crop_tot[1]             0.91  6818    1
crop_tot[2]             3.07 12018    1
crop_tot[3]             0.77 11169    1
crop_tot[4]             1.85 11405    1
crop_tot_diff[1]        2.44 11993    1
crop_tot_diff[2]        0.16  8924    1
crop_tot_diff[3]        1.20 11006    1
crop_int_diff[1]        0.97  7001    1
crop_int_diff[2]       -0.24  7021    1
crop_int_diff[3]        0.17  6160    1
crop_bdepth_diff[1]     0.02 15910    1
crop_bdepth_diff[2]    -0.14 14371    1
crop_bdepth_diff[3]    -0.45 20000    1
lp__                -1906.29  5035    1

Samples were drawn using NUTS(diag_e) at Fri Jun 23 15:55:52 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff
y_pred[1]             0.01    0.00 0.07  0.00  0.00  0.00  0.00  0.04 20000
y_pred[15]            0.02    0.00 0.08  0.00  0.00  0.00  0.01  0.11 20000
y_pred[28]            0.02    0.00 0.09  0.00  0.00  0.00  0.01  0.14 20000
mu_pred[1]           -3.40    0.01 1.60 -6.43 -4.52 -3.43 -2.35 -0.16 15910
mu_pred[15]          -4.89    0.01 0.80 -6.48 -5.43 -4.89 -4.36 -3.33 14833
mu_pred[28]          -5.43    0.01 0.73 -6.86 -5.92 -5.43 -4.95 -3.99 17238
mu_obs_pred[1]       -6.72    0.01 0.99 -8.63 -7.40 -6.73 -6.05 -4.75 17044
mu_obs_pred[15]      -5.46    0.01 0.77 -6.99 -5.97 -5.46 -4.94 -3.95 15937
mu_obs_pred[28]      -5.45    0.01 0.73 -6.88 -5.94 -5.46 -4.97 -4.01 17297
detect_odds_pred[1]   0.53    0.00 0.19  0.17  0.39  0.53  0.68  0.88 17613
detect_odds_pred[15]  0.76    0.00 0.12  0.47  0.70  0.78  0.85  0.94 15984
detect_odds_pred[28]  0.77    0.00 0.11  0.50  0.70  0.79  0.85  0.94 17328
pred_tot[1]           1.71    0.02 1.96  0.25  0.71  1.19  2.04  6.25 15707
                     Rhat
y_pred[1]               1
y_pred[15]              1
y_pred[28]              1
mu_pred[1]              1
mu_pred[15]             1
mu_pred[28]             1
mu_obs_pred[1]          1
mu_obs_pred[15]         1
mu_obs_pred[28]         1
detect_odds_pred[1]     1
detect_odds_pred[15]    1
detect_odds_pred[28]    1
pred_tot[1]             1

Samples were drawn using NUTS(diag_e) at Fri Jun 23 15:55:52 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "mean of depth: 63.1561040693796"

mean of log(nonzero root volume): -5.514442 

RMSE of mu_obs vs log observed (zeroes excluded):  1.704809 
RMSE/var:  0.459945 

ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
Warning message:
Removed 433 rows containing non-finite values (stat_smooth). 
null device 
          1 

real	4m6.690s
user	15m39.256s
sys	0m9.132s
Extracting fits
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.15.1, packaged: 2017-04-19 05:03:57 UTC, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Joining, by = c("term", "estimate", "std.error", "rhat", "ess")
Joining, by = "crop_num"
Joining, by = "parameter"
