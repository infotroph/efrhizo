Starting current_2014_s2 on  Thu Jan 12 22:54:22 UTC 2017
Running mctd_foursurf.R for year  2014  session  2
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.14.1, packaged: 2016-12-28 14:55:41 UTC, GitRev: 5fa1e80eb817)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
R version 3.3.2 (2016-10-31)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X El Capitan 10.11.6

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  base     

other attached packages:
[1] rstan_2.14.1       StanHeaders_2.14.0 ggplot2_2.2.1     

loaded via a namespace (and not attached):
 [1] colorspace_1.3-2 scales_0.4.1     assertthat_0.1   lazyeval_0.2.0  
 [5] plyr_1.8.4       tools_3.3.2      inline_0.3.14    gtable_0.2.0    
 [9] tibble_1.2       gridExtra_2.2.1  Rcpp_0.12.8      grid_3.3.2      
[13] methods_3.3.2    stats4_3.3.2     munsell_0.4.3   
structure(list(Tube = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 25L, 
26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 
39L, 40L, 42L, 43L, 44L, 45L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 
54L, 55L, 56L, 57L, 58L, 61L, 62L, 63L, 64L, 65L, 66L, 69L, 70L, 
71L, 72L, 73L, 75L, 76L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 
86L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L), Tube_alias = 1:70), .Names = c("Tube", 
"Tube_alias"), row.names = c(NA, -70L), class = "data.frame")
   Tube Tube_alias
1     1          1
2     2          2
3     3          3
4     4          4
5     5          5
6     6          6
7     7          7
8     8          8
9    25          9
10   26         10
11   27         11
12   28         12
13   29         13
14   30         14
15   31         15
16   32         16
17   33         17
18   34         18
19   35         19
20   36         20
21   37         21
22   38         22
23   39         23
24   40         24
25   42         25
26   43         26
27   44         27
28   45         28
29   47         29
30   48         30
31   49         31
32   50         32
33   51         33
34   52         34
35   53         35
36   54         36
37   55         37
38   56         38
39   57         39
40   58         40
41   61         41
42   62         42
43   63         43
44   64         44
45   65         45
46   66         46
47   69         47
48   70         48
49   71         49
50   72         50
51   73         51
52   75         52
53   76         53
54   78         54
55   79         55
56   80         56
57   81         57
58   82         58
59   83         59
60   84         60
61   85         61
62   86         62
63   89         63
64   90         64
65   91         65
66   92         66
67   93         67
68   94         68
69   95         69
70   96         70
[1] "Using data from 2014 , session 2"
[1] "Crop name-to-number key:"
              num          name first_tube last_tube first_tube_alias
Maize-Soybean   1 Maize-Soybean          1         8                1
Switchgrass     2   Switchgrass         49        72               31
Miscanthus      3    Miscanthus         25        48                9
Prairie         4       Prairie         73        96               51
              last_tube_alias n_tubes
Maize-Soybean               8       8
Switchgrass                50      20
Miscanthus                 30      22
Prairie                    70      20
[1] "conditions for predicted data:"
   tube depth       Species
1     1     1   Switchgrass
2     2     1    Miscanthus
3     3     1       Prairie
4     4     1 Maize-Soybean
5     1     8   Switchgrass
6     2     8    Miscanthus
7     3     8       Prairie
8     4     8 Maize-Soybean
9     1    15   Switchgrass
10    2    15    Miscanthus
11    3    15       Prairie
12    4    15 Maize-Soybean
13    1    21   Switchgrass
14    2    21    Miscanthus
15    3    21       Prairie
16    4    21 Maize-Soybean
17    1    28   Switchgrass
18    2    28    Miscanthus
19    3    28       Prairie
20    4    28 Maize-Soybean
21    1    35   Switchgrass
22    2    35    Miscanthus
23    3    35       Prairie
24    4    35 Maize-Soybean
25    1    42   Switchgrass
26    2    42    Miscanthus
27    3    42       Prairie
28    4    42 Maize-Soybean
29    1    49   Switchgrass
30    2    49    Miscanthus
31    3    49       Prairie
32    4    49 Maize-Soybean
33    1    55   Switchgrass
34    2    55    Miscanthus
35    3    55       Prairie
36    4    55 Maize-Soybean
37    1    62   Switchgrass
38    2    62    Miscanthus
39    3    62       Prairie
40    4    62 Maize-Soybean
41    1    69   Switchgrass
42    2    69    Miscanthus
43    3    69       Prairie
44    4    69 Maize-Soybean
45    1    76   Switchgrass
46    2    76    Miscanthus
47    3    76       Prairie
48    4    76 Maize-Soybean
49    1    82   Switchgrass
50    2    82    Miscanthus
51    3    82       Prairie
52    4    82 Maize-Soybean
53    1    89   Switchgrass
54    2    89    Miscanthus
55    3    89       Prairie
56    4    89 Maize-Soybean
57    1    96   Switchgrass
58    2    96    Miscanthus
59    3    96       Prairie
60    4    96 Maize-Soybean
61    1   103   Switchgrass
62    2   103    Miscanthus
63    3   103       Prairie
64    4   103 Maize-Soybean
65    1   110   Switchgrass
66    2   110    Miscanthus
67    3   110       Prairie
68    4   110 Maize-Soybean
69    1   116   Switchgrass
70    2   116    Miscanthus
71    3   116       Prairie
72    4   116 Maize-Soybean
73    1   123   Switchgrass
74    2   123    Miscanthus
75    3   123       Prairie
76    4   123 Maize-Soybean
77    1   130   Switchgrass
78    2   130    Miscanthus
79    3   130       Prairie
80    4   130 Maize-Soybean

TRANSLATING MODEL 'mctd_foursurf' FROM Stan CODE TO C++ CODE NOW.
successful in parsing the Stan model 'mctd_foursurf'.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 5).

Chain 5, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 5, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 5, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 5, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 5, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 5, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 5, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 5, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 5, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 5, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 5, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 42.5845 seconds (Warm-up)
               130.579 seconds (Sampling)
               173.164 seconds (Total)

The following numerical problems occured the indicated number of times on chain 1
                                                                                             count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!      5
Exception thrown at line 139: lognormal_log: Scale parameter[35] is inf, but must be finite!     2
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 39.6505 seconds (Warm-up)
               132.309 seconds (Sampling)
               171.96 seconds (Total)

The following numerical problems occured the indicated number of times on chain 4
                                                                                             count
Exception thrown at line 139: lognormal_log: Scale parameter[4] is inf, but must be finite!      4
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                 1
Exception thrown at line 139: lognormal_log: Scale parameter[35] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 41.53 seconds (Warm-up)
               131.074 seconds (Sampling)
               172.604 seconds (Total)

The following numerical problems occured the indicated number of times on chain 3
                                                                                             count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!      7
Exception thrown at line 139: lognormal_log: Scale parameter[48] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 42.8932 seconds (Warm-up)
               130.819 seconds (Sampling)
               173.712 seconds (Total)

The following numerical problems occured the indicated number of times on chain 2
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     9
Exception thrown at line 139: lognormal_log: Scale parameter[4] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 5, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 41.9642 seconds (Warm-up)
               137.726 seconds (Sampling)
               179.69 seconds (Total)

The following numerical problems occured the indicated number of times on chain 5
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     5
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
Exception thrown at line 139: lognormal_log: Scale parameter[4] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.
NULL
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                        mean se_mean    sd     2.5%      25%      50%      75%
loc_detect             -5.67    0.00  0.11    -5.89    -5.74    -5.67    -5.59
scale_detect            0.58    0.00  0.08     0.43     0.52     0.58     0.64
loc_surface[1]         18.34    0.06  6.37     5.47    14.18    18.32    22.58
loc_surface[2]         27.60    0.02  2.56    22.53    25.89    27.64    29.34
loc_surface[3]         17.59    0.03  3.08    11.76    15.48    17.54    19.64
loc_surface[4]         26.17    0.02  2.33    21.59    24.63    26.18    27.74
scale_surface[1]        7.86    0.02  3.31     3.18     5.63     7.30     9.39
scale_surface[2]        5.28    0.01  0.68     4.11     4.81     5.23     5.69
scale_surface[3]        5.33    0.01  1.03     3.54     4.61     5.25     5.94
scale_surface[4]        5.43    0.01  0.60     4.37     5.00     5.39     5.80
intercept[1]           -4.91    0.00  0.19    -5.29    -5.04    -4.91    -4.78
intercept[2]           -4.63    0.00  0.13    -4.89    -4.72    -4.63    -4.54
intercept[3]           -5.09    0.00  0.12    -5.33    -5.17    -5.09    -5.01
intercept[4]           -4.84    0.00  0.12    -5.08    -4.92    -4.84    -4.76
b_depth[1]             -0.42    0.00  0.24    -0.91    -0.57    -0.41    -0.25
b_depth[2]             -1.39    0.00  0.20    -1.80    -1.52    -1.39    -1.25
b_depth[3]             -0.82    0.00  0.16    -1.14    -0.92    -0.81    -0.71
b_depth[4]             -1.20    0.00  0.17    -1.55    -1.32    -1.20    -1.09
sig_tube                0.42    0.00  0.07     0.30     0.37     0.41     0.46
sigma[1]                1.95    0.00  0.13     1.72     1.86     1.95     2.04
sigma[2]                1.77    0.00  0.07     1.63     1.71     1.76     1.81
sigma[3]                1.99    0.00  0.08     1.84     1.93     1.98     2.04
sigma[4]                1.25    0.00  0.05     1.15     1.22     1.25     1.29
crop_tot[1]             1.27    0.00  0.45     0.74     0.99     1.17     1.43
crop_tot[2]             8.69    0.07  6.40     2.76     4.90     6.99    10.30
crop_tot[3]             1.56    0.00  0.48     0.96     1.24     1.46     1.76
crop_tot[4]             4.15    0.02  1.98     1.89     2.85     3.67     4.91
crop_tot_diff[1]        7.42    0.07  6.42     1.39     3.63     5.72     9.09
crop_tot_diff[2]        0.29    0.01  0.66    -0.97    -0.04     0.28     0.62
crop_tot_diff[3]        2.88    0.02  2.03     0.37     1.59     2.44     3.68
crop_int_diff[1]        0.28    0.00  0.23    -0.17     0.13     0.28     0.43
crop_int_diff[2]       -0.18    0.00  0.22    -0.62    -0.32    -0.18    -0.03
crop_int_diff[3]        0.07    0.00  0.22    -0.37    -0.08     0.07     0.21
crop_bdepth_diff[1]    -0.97    0.00  0.31    -1.59    -1.18    -0.97    -0.76
crop_bdepth_diff[2]    -0.40    0.00  0.29    -0.96    -0.59    -0.40    -0.20
crop_bdepth_diff[3]    -0.78    0.00  0.29    -1.36    -0.98    -0.79    -0.59
lp__                -1847.86    0.19 10.26 -1868.73 -1854.59 -1847.65 -1840.82
                       97.5% n_eff Rhat
loc_detect             -5.46  4149    1
scale_detect            0.77  3728    1
loc_surface[1]         30.85 13081    1
loc_surface[2]         32.58 16161    1
loc_surface[3]         23.75 12166    1
loc_surface[4]         30.68 13751    1
scale_surface[1]       16.11 20000    1
scale_surface[2]        6.78  7668    1
scale_surface[3]        7.59 20000    1
scale_surface[4]        6.76 10231    1
intercept[1]           -4.52  8019    1
intercept[2]           -4.37  7737    1
intercept[3]           -4.85  6510    1
intercept[4]           -4.61  5467    1
b_depth[1]              0.02 13446    1
b_depth[2]             -1.00  8717    1
b_depth[3]             -0.53  8941    1
b_depth[4]             -0.88  9363    1
sig_tube                0.56  3910    1
sigma[1]                2.23 20000    1
sigma[2]                1.92 20000    1
sigma[3]                2.15 20000    1
sigma[4]                1.36 20000    1
crop_tot[1]             2.39 10538    1
crop_tot[2]            24.91  8944    1
crop_tot[3]             2.75  9219    1
crop_tot[4]             9.18  9910    1
crop_tot_diff[1]       23.67  8920    1
crop_tot_diff[2]        1.62  9053    1
crop_tot_diff[3]        7.98  9226    1
crop_int_diff[1]        0.72  7670    1
crop_int_diff[2]        0.24  7606    1
crop_int_diff[3]        0.49  7416    1
crop_bdepth_diff[1]    -0.36  9767    1
crop_bdepth_diff[2]     0.17 10445    1
crop_bdepth_diff[3]    -0.21 10750    1
lp__                -1828.40  2950    1

Samples were drawn using NUTS(diag_e) at Thu Jan 12 17:57:32 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff
y_pred[1]             0.10    0.00 0.54  0.00  0.00  0.02  0.06  0.71 19407
y_pred[15]            0.02    0.00 0.04  0.00  0.00  0.01  0.02  0.11 19787
y_pred[28]            0.05    0.00 0.40  0.00  0.00  0.00  0.02  0.37 18004
mu_pred[1]            1.17    0.01 1.00 -0.73  0.49  1.15  1.82  3.22  9340
mu_pred[15]          -3.49    0.00 0.49 -4.43 -3.81 -3.49 -3.16 -2.51 15285
mu_pred[28]          -4.72    0.00 0.48 -5.68 -5.04 -4.72 -4.41 -3.77 15382
mu_obs_pred[1]       -3.93    0.00 0.60 -5.10 -4.33 -3.93 -3.53 -2.73 17121
mu_obs_pred[15]      -4.78    0.00 0.45 -5.68 -5.08 -4.78 -4.48 -3.88 17466
mu_obs_pred[28]      -4.80    0.00 0.48 -5.74 -5.11 -4.80 -4.48 -3.85 15854
detect_odds_pred[1]   0.93    0.00 0.07  0.73  0.91  0.95  0.98  0.99 16008
detect_odds_pred[15]  0.80    0.00 0.12  0.50  0.73  0.82  0.89  0.96 18153
detect_odds_pred[28]  0.79    0.00 0.13  0.48  0.72  0.82  0.89  0.96 16018
pred_tot[1]           9.59    0.09 9.33  2.02  4.49  7.04 11.37 32.83 10950
                     Rhat
y_pred[1]               1
y_pred[15]              1
y_pred[28]              1
mu_pred[1]              1
mu_pred[15]             1
mu_pred[28]             1
mu_obs_pred[1]          1
mu_obs_pred[15]         1
mu_obs_pred[28]         1
detect_odds_pred[1]     1
detect_odds_pred[15]    1
detect_odds_pred[28]    1
pred_tot[1]             1

Samples were drawn using NUTS(diag_e) at Thu Jan 12 17:57:32 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "mean of depth: 64.9721115537849"

mean of log(nonzero root volume): -4.865198 

RMSE of mu_obs vs log observed (zeroes excluded):  1.712297 
RMSE/var:  0.5156624 

ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
Warning message:
Removed 1 rows containing missing values (geom_bar). 
Warning message:
Removed 429 rows containing non-finite values (stat_smooth). 
null device 
          1 

real	4m7.461s
user	15m26.455s
sys	0m7.201s
Extracting fits
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.14.1, packaged: 2016-12-28 14:55:41 UTC, GitRev: 5fa1e80eb817)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Joining, by = c("term", "estimate", "std.error", "rhat", "ess")
Joining, by = "crop_num"
Joining, by = "parameter"
