Starting current_2014_s2 on  Sat Nov 19 15:30:51 UTC 2016
Running mctd_foursurf.R for year  2014  session  2
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.12.1, packaged: , GitRev: 85f7a56811da)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
R version 3.3.2 (2016-10-31)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X El Capitan 10.11.6

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  base     

other attached packages:
[1] rstan_2.12.1       StanHeaders_2.12.0 ggplot2_2.2.0     

loaded via a namespace (and not attached):
 [1] colorspace_1.3-0 scales_0.4.1     assertthat_0.1   lazyeval_0.2.0  
 [5] plyr_1.8.4       tools_3.3.2      inline_0.3.14    gtable_0.2.0    
 [9] tibble_1.2       gridExtra_2.2.1  Rcpp_0.12.7      grid_3.3.2      
[13] methods_3.3.2    stats4_3.3.2     munsell_0.4.3   
structure(list(Tube = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 25L, 
26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 
39L, 40L, 42L, 43L, 44L, 45L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 
54L, 55L, 56L, 57L, 58L, 61L, 62L, 63L, 64L, 65L, 66L, 69L, 70L, 
71L, 72L, 73L, 75L, 76L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 
86L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L), Tube_alias = 1:70), .Names = c("Tube", 
"Tube_alias"), row.names = c(NA, -70L), class = "data.frame")
   Tube Tube_alias
1     1          1
2     2          2
3     3          3
4     4          4
5     5          5
6     6          6
7     7          7
8     8          8
9    25          9
10   26         10
11   27         11
12   28         12
13   29         13
14   30         14
15   31         15
16   32         16
17   33         17
18   34         18
19   35         19
20   36         20
21   37         21
22   38         22
23   39         23
24   40         24
25   42         25
26   43         26
27   44         27
28   45         28
29   47         29
30   48         30
31   49         31
32   50         32
33   51         33
34   52         34
35   53         35
36   54         36
37   55         37
38   56         38
39   57         39
40   58         40
41   61         41
42   62         42
43   63         43
44   64         44
45   65         45
46   66         46
47   69         47
48   70         48
49   71         49
50   72         50
51   73         51
52   75         52
53   76         53
54   78         54
55   79         55
56   80         56
57   81         57
58   82         58
59   83         59
60   84         60
61   85         61
62   86         62
63   89         63
64   90         64
65   91         65
66   92         66
67   93         67
68   94         68
69   95         69
70   96         70
[1] "Using data from 2014 , session 2"
[1] "Crop name-to-number key:"
              num          name first_tube last_tube first_tube_alias
Maize-Soybean   1 Maize-Soybean          1         8                1
Switchgrass     2   Switchgrass         49        72               31
Miscanthus      3    Miscanthus         25        48                9
Prairie         4       Prairie         73        96               51
              last_tube_alias n_tubes
Maize-Soybean               8       8
Switchgrass                50      20
Miscanthus                 30      22
Prairie                    70      20
[1] "conditions for predicted data:"
   tube depth       Species
1     1     1   Switchgrass
2     2     1    Miscanthus
3     3     1       Prairie
4     4     1 Maize-Soybean
5     1     8   Switchgrass
6     2     8    Miscanthus
7     3     8       Prairie
8     4     8 Maize-Soybean
9     1    15   Switchgrass
10    2    15    Miscanthus
11    3    15       Prairie
12    4    15 Maize-Soybean
13    1    21   Switchgrass
14    2    21    Miscanthus
15    3    21       Prairie
16    4    21 Maize-Soybean
17    1    28   Switchgrass
18    2    28    Miscanthus
19    3    28       Prairie
20    4    28 Maize-Soybean
21    1    35   Switchgrass
22    2    35    Miscanthus
23    3    35       Prairie
24    4    35 Maize-Soybean
25    1    42   Switchgrass
26    2    42    Miscanthus
27    3    42       Prairie
28    4    42 Maize-Soybean
29    1    49   Switchgrass
30    2    49    Miscanthus
31    3    49       Prairie
32    4    49 Maize-Soybean
33    1    55   Switchgrass
34    2    55    Miscanthus
35    3    55       Prairie
36    4    55 Maize-Soybean
37    1    62   Switchgrass
38    2    62    Miscanthus
39    3    62       Prairie
40    4    62 Maize-Soybean
41    1    69   Switchgrass
42    2    69    Miscanthus
43    3    69       Prairie
44    4    69 Maize-Soybean
45    1    76   Switchgrass
46    2    76    Miscanthus
47    3    76       Prairie
48    4    76 Maize-Soybean
49    1    82   Switchgrass
50    2    82    Miscanthus
51    3    82       Prairie
52    4    82 Maize-Soybean
53    1    89   Switchgrass
54    2    89    Miscanthus
55    3    89       Prairie
56    4    89 Maize-Soybean
57    1    96   Switchgrass
58    2    96    Miscanthus
59    3    96       Prairie
60    4    96 Maize-Soybean
61    1   103   Switchgrass
62    2   103    Miscanthus
63    3   103       Prairie
64    4   103 Maize-Soybean
65    1   110   Switchgrass
66    2   110    Miscanthus
67    3   110       Prairie
68    4   110 Maize-Soybean
69    1   116   Switchgrass
70    2   116    Miscanthus
71    3   116       Prairie
72    4   116 Maize-Soybean
73    1   123   Switchgrass
74    2   123    Miscanthus
75    3   123       Prairie
76    4   123 Maize-Soybean
77    1   130   Switchgrass
78    2   130    Miscanthus
79    3   130       Prairie
80    4   130 Maize-Soybean

TRANSLATING MODEL 'mctd_foursurf' FROM Stan CODE TO C++ CODE NOW.
successful in parsing the Stan model 'mctd_foursurf'.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.
starting worker pid=33985 on localhost:11194 at 10:30:56.240
starting worker pid=33993 on localhost:11194 at 10:30:56.426
starting worker pid=34001 on localhost:11194 at 10:30:56.615
starting worker pid=34009 on localhost:11194 at 10:30:56.803
starting worker pid=34017 on localhost:11194 at 10:30:56.997

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 5).

Chain 5, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 5, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 5, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 5, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 5, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 5, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 5, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 5, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 5, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 5, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 5, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 46.0836 seconds (Warm-up)
               166.176 seconds (Sampling)
               212.26 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                             count
Exception thrown at line 150: lognormal_log: Scale parameter[4] is inf, but must be finite!      4
Exception thrown at line 140: normal_log: Scale parameter is 0, but must be > 0!                 1
Exception thrown at line 150: lognormal_log: Scale parameter[35] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 50.8461 seconds (Warm-up)
               165.235 seconds (Sampling)
               216.081 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                             count
Exception thrown at line 150: lognormal_log: Scale parameter[1] is inf, but must be finite!      5
Exception thrown at line 150: lognormal_log: Scale parameter[35] is inf, but must be finite!     2
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 52.1511 seconds (Warm-up)
               164.097 seconds (Sampling)
               216.248 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 3
                                                                                             count
Exception thrown at line 150: lognormal_log: Scale parameter[1] is inf, but must be finite!      7
Exception thrown at line 150: lognormal_log: Scale parameter[48] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 5, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 49.1512 seconds (Warm-up)
               166.049 seconds (Sampling)
               215.2 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 5
                                                                                            count
Exception thrown at line 150: lognormal_log: Scale parameter[1] is inf, but must be finite!     5
Exception thrown at line 140: normal_log: Scale parameter is 0, but must be > 0!                1
Exception thrown at line 150: lognormal_log: Scale parameter[4] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 54.6073 seconds (Warm-up)
               216.091 seconds (Sampling)
               270.698 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                            count
Exception thrown at line 150: lognormal_log: Scale parameter[1] is inf, but must be finite!     9
Exception thrown at line 150: lognormal_log: Scale parameter[4] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.
NULL
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                        mean se_mean    sd     2.5%      25%      50%      75%
loc_detect             -5.67    0.00  0.11    -5.90    -5.74    -5.67    -5.60
scale_detect            0.58    0.00  0.08     0.44     0.53     0.58     0.64
loc_surface[1]         18.34    0.06  6.42     5.37    14.23    18.42    22.54
loc_surface[2]         27.61    0.02  2.48    22.62    26.00    27.63    29.29
loc_surface[3]         17.67    0.03  3.10    11.77    15.60    17.59    19.72
loc_surface[4]         26.15    0.02  2.34    21.56    24.56    26.17    27.71
scale_surface[1]        7.81    0.02  3.23     3.22     5.60     7.25     9.34
scale_surface[2]        5.28    0.01  0.68     4.11     4.81     5.22     5.68
scale_surface[3]        5.32    0.01  1.01     3.55     4.62     5.25     5.94
scale_surface[4]        5.42    0.00  0.60     4.34     5.00     5.37     5.79
intercept[1]           -4.91    0.00  0.19    -5.28    -5.03    -4.91    -4.78
intercept[2]           -4.63    0.00  0.13    -4.88    -4.72    -4.63    -4.54
intercept[3]           -5.09    0.00  0.12    -5.33    -5.17    -5.09    -5.00
intercept[4]           -4.84    0.00  0.12    -5.07    -4.92    -4.84    -4.76
b_depth[1]             -0.42    0.00  0.24    -0.92    -0.57    -0.41    -0.26
b_depth[2]             -1.39    0.00  0.20    -1.80    -1.52    -1.39    -1.26
b_depth[3]             -0.82    0.00  0.16    -1.15    -0.92    -0.81    -0.71
b_depth[4]             -1.20    0.00  0.17    -1.55    -1.31    -1.20    -1.08
sig_tube                0.42    0.00  0.06     0.30     0.37     0.42     0.46
sigma[1]                1.95    0.00  0.13     1.72     1.86     1.94     2.03
sigma[2]                1.76    0.00  0.07     1.63     1.71     1.76     1.81
sigma[3]                1.99    0.00  0.08     1.84     1.93     1.98     2.04
sigma[4]                1.25    0.00  0.05     1.15     1.22     1.25     1.29
crop_tot[1]             1.28    0.00  0.47     0.73     0.99     1.18     1.43
crop_tot[2]             8.66    0.06  6.03     2.82     4.94     7.01    10.38
crop_tot[3]             1.57    0.00  0.49     0.96     1.25     1.46     1.77
crop_tot[4]             4.16    0.02  2.07     1.90     2.83     3.66     4.85
crop_tot_diff[1]        7.38    0.07  6.05     1.42     3.66     5.76     9.13
crop_tot_diff[2]        0.29    0.01  0.68    -1.03    -0.05     0.28     0.63
crop_tot_diff[3]        2.88    0.02  2.13     0.33     1.56     2.43     3.63
crop_int_diff[1]        0.28    0.00  0.23    -0.17     0.13     0.28     0.43
crop_int_diff[2]       -0.18    0.00  0.22    -0.62    -0.33    -0.18    -0.03
crop_int_diff[3]        0.07    0.00  0.22    -0.37    -0.08     0.07     0.21
crop_bdepth_diff[1]    -0.97    0.00  0.31    -1.59    -1.18    -0.97    -0.76
crop_bdepth_diff[2]    -0.40    0.00  0.29    -0.97    -0.59    -0.40    -0.21
crop_bdepth_diff[3]    -0.78    0.00  0.30    -1.36    -0.98    -0.79    -0.59
lp__                -1848.08    0.19 10.22 -1868.83 -1854.89 -1847.90 -1841.02
                       97.5% n_eff Rhat
loc_detect             -5.46  3983    1
scale_detect            0.77  3636    1
loc_surface[1]         30.87 11611    1
loc_surface[2]         32.42 18051    1
loc_surface[3]         23.99 12893    1
loc_surface[4]         30.71 14125    1
scale_surface[1]       15.79 20000    1
scale_surface[2]        6.75  7835    1
scale_surface[3]        7.50 20000    1
scale_surface[4]        6.74 20000    1
intercept[1]           -4.53  9379    1
intercept[2]           -4.37  8737    1
intercept[3]           -4.85  7085    1
intercept[4]           -4.61  5868    1
b_depth[1]              0.02 13118    1
b_depth[2]             -1.01  8548    1
b_depth[3]             -0.53  9415    1
b_depth[4]             -0.88 10692    1
sig_tube                0.56  3826    1
sigma[1]                2.23 20000    1
sigma[2]                1.91 20000    1
sigma[3]                2.15 20000    1
sigma[4]                1.36 20000    1
crop_tot[1]             2.44  9859    1
crop_tot[2]            24.33  9244    1
crop_tot[3]             2.80 10165    1
crop_tot[4]             9.31  9807    1
crop_tot_diff[1]       23.07  8420    1
crop_tot_diff[2]        1.66 10690    1
crop_tot_diff[3]        8.15  9910    1
crop_int_diff[1]        0.73  8044    1
crop_int_diff[2]        0.24  8409    1
crop_int_diff[3]        0.50  8308    1
crop_bdepth_diff[1]    -0.35 10507    1
crop_bdepth_diff[2]     0.17 11136    1
crop_bdepth_diff[3]    -0.18 11280    1
lp__                -1828.67  2908    1

Samples were drawn using NUTS(diag_e) at Sat Nov 19 10:35:34 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff
y_pred[1]             0.11    0.00 0.62  0.00  0.00  0.02  0.06  0.75 20000
y_pred[15]            0.02    0.00 0.04  0.00  0.00  0.01  0.02  0.11 20000
y_pred[28]            0.06    0.00 0.52  0.00  0.00  0.00  0.02  0.39 20000
mu_pred[1]            1.18    0.01 0.99 -0.70  0.51  1.16  1.83  3.20  9335
mu_pred[15]          -3.48    0.00 0.49 -4.43 -3.81 -3.49 -3.16 -2.50 14999
mu_pred[28]          -4.72    0.00 0.48 -5.66 -5.03 -4.72 -4.40 -3.77 15978
mu_obs_pred[1]       -3.93    0.00 0.60 -5.08 -4.33 -3.94 -3.54 -2.73 18585
mu_obs_pred[15]      -4.77    0.00 0.46 -5.67 -5.08 -4.77 -4.47 -3.87 16827
mu_obs_pred[28]      -4.79    0.00 0.47 -5.73 -5.10 -4.79 -4.48 -3.86 16299
detect_odds_pred[1]   0.93    0.00 0.07  0.73  0.91  0.95  0.98  0.99 18162
detect_odds_pred[15]  0.80    0.00 0.12  0.50  0.73  0.82  0.89  0.96 17180
detect_odds_pred[28]  0.79    0.00 0.13  0.48  0.72  0.82  0.89  0.96 16297
pred_tot[1]           9.54    0.08 8.95  2.09  4.51  7.03 11.46 32.37 11303
                     Rhat
y_pred[1]               1
y_pred[15]              1
y_pred[28]              1
mu_pred[1]              1
mu_pred[15]             1
mu_pred[28]             1
mu_obs_pred[1]          1
mu_obs_pred[15]         1
mu_obs_pred[28]         1
detect_odds_pred[1]     1
detect_odds_pred[15]    1
detect_odds_pred[28]    1
pred_tot[1]             1

Samples were drawn using NUTS(diag_e) at Sat Nov 19 10:35:34 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "mean of depth: 64.9721115537849"

mean of log(nonzero root volume): -4.865198 

RMSE of mu_obs vs log observed (zeroes excluded):  1.712054 
RMSE/var:  0.5155891 

ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
Warning message:
Removed 1 rows containing missing values (geom_bar). 
Warning message:
Removed 429 rows containing non-finite values (stat_smooth). 
null device 
          1 

real	5m42.998s
user	0m59.113s
sys	0m4.597s
Extracting fits
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.12.1, packaged: , GitRev: 85f7a56811da)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Joining, by = c("term", "estimate", "std.error", "rhat", "ess")
Joining, by = "crop_num"
Joining, by = "parameter"
