Starting current_2012_s6 on  Thu Jan 12 22:45:10 UTC 2017
Running mctd_foursurf.R for year  2012  session  6
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.14.1, packaged: 2016-12-28 14:55:41 UTC, GitRev: 5fa1e80eb817)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
R version 3.3.2 (2016-10-31)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X El Capitan 10.11.6

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  base     

other attached packages:
[1] rstan_2.14.1       StanHeaders_2.14.0 ggplot2_2.2.1     

loaded via a namespace (and not attached):
 [1] colorspace_1.3-2 scales_0.4.1     assertthat_0.1   lazyeval_0.2.0  
 [5] plyr_1.8.4       tools_3.3.2      inline_0.3.14    gtable_0.2.0    
 [9] tibble_1.2       gridExtra_2.2.1  Rcpp_0.12.8      grid_3.3.2      
[13] methods_3.3.2    stats4_3.3.2     munsell_0.4.3   
structure(list(Tube = c(25L, 26L, 28L, 29L, 30L, 31L, 32L, 33L, 
34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 
47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 
60L, 61L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 
74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 
88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L), Tube_alias = 1:69), .Names = c("Tube", 
"Tube_alias"), row.names = c(NA, -69L), class = "data.frame")
   Tube Tube_alias
1    25          1
2    26          2
3    28          3
4    29          4
5    30          5
6    31          6
7    32          7
8    33          8
9    34          9
10   35         10
11   36         11
12   37         12
13   38         13
14   39         14
15   40         15
16   41         16
17   42         17
18   43         18
19   44         19
20   45         20
21   46         21
22   47         22
23   48         23
24   49         24
25   50         25
26   51         26
27   52         27
28   53         28
29   54         29
30   55         30
31   56         31
32   57         32
33   58         33
34   59         34
35   60         35
36   61         36
37   63         37
38   64         38
39   65         39
40   66         40
41   67         41
42   68         42
43   69         43
44   70         44
45   71         45
46   72         46
47   73         47
48   74         48
49   75         49
50   76         50
51   77         51
52   78         52
53   79         53
54   80         54
55   81         55
56   82         56
57   83         57
58   84         58
59   85         59
60   86         60
61   88         61
62   89         62
63   90         63
64   91         64
65   92         65
66   93         66
67   94         67
68   95         68
69   96         69
[1] "Using data from 2012 , session 6"
[1] "Crop name-to-number key:"
            num        name first_tube last_tube first_tube_alias
Switchgrass   1 Switchgrass         49        72               24
Miscanthus    2  Miscanthus         25        48                1
Prairie       3     Prairie         73        96               47
            last_tube_alias n_tubes
Switchgrass              46      23
Miscanthus               23      23
Prairie                  69      23
[1] "conditions for predicted data:"
   tube depth     Species
1     1     1  Miscanthus
2     2     1     Prairie
3     3     1 Switchgrass
4     4     1  Miscanthus
5     1     8  Miscanthus
6     2     8     Prairie
7     3     8 Switchgrass
8     4     8  Miscanthus
9     1    15  Miscanthus
10    2    15     Prairie
11    3    15 Switchgrass
12    4    15  Miscanthus
13    1    21  Miscanthus
14    2    21     Prairie
15    3    21 Switchgrass
16    4    21  Miscanthus
17    1    28  Miscanthus
18    2    28     Prairie
19    3    28 Switchgrass
20    4    28  Miscanthus
21    1    35  Miscanthus
22    2    35     Prairie
23    3    35 Switchgrass
24    4    35  Miscanthus
25    1    42  Miscanthus
26    2    42     Prairie
27    3    42 Switchgrass
28    4    42  Miscanthus
29    1    49  Miscanthus
30    2    49     Prairie
31    3    49 Switchgrass
32    4    49  Miscanthus
33    1    55  Miscanthus
34    2    55     Prairie
35    3    55 Switchgrass
36    4    55  Miscanthus
37    1    62  Miscanthus
38    2    62     Prairie
39    3    62 Switchgrass
40    4    62  Miscanthus
41    1    69  Miscanthus
42    2    69     Prairie
43    3    69 Switchgrass
44    4    69  Miscanthus
45    1    76  Miscanthus
46    2    76     Prairie
47    3    76 Switchgrass
48    4    76  Miscanthus
49    1    82  Miscanthus
50    2    82     Prairie
51    3    82 Switchgrass
52    4    82  Miscanthus
53    1    89  Miscanthus
54    2    89     Prairie
55    3    89 Switchgrass
56    4    89  Miscanthus
57    1    96  Miscanthus
58    2    96     Prairie
59    3    96 Switchgrass
60    4    96  Miscanthus
61    1   103  Miscanthus
62    2   103     Prairie
63    3   103 Switchgrass
64    4   103  Miscanthus
65    1   110  Miscanthus
66    2   110     Prairie
67    3   110 Switchgrass
68    4   110  Miscanthus
69    1   116  Miscanthus
70    2   116     Prairie
71    3   116 Switchgrass
72    4   116  Miscanthus
73    1   123  Miscanthus
74    2   123     Prairie
75    3   123 Switchgrass
76    4   123  Miscanthus
77    1   130  Miscanthus
78    2   130     Prairie
79    3   130 Switchgrass
80    4   130  Miscanthus

TRANSLATING MODEL 'mctd_foursurf' FROM Stan CODE TO C++ CODE NOW.
successful in parsing the Stan model 'mctd_foursurf'.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 5).

Chain 5, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 5, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 5, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 5, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 5, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 5, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 5, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 5, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 5, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 5, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 5, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 36.1577 seconds (Warm-up)
               120.123 seconds (Sampling)
               156.281 seconds (Total)

The following numerical problems occured the indicated number of times on chain 2
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     7
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 5, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 35.1474 seconds (Warm-up)
               120.211 seconds (Sampling)
               155.359 seconds (Total)

The following numerical problems occured the indicated number of times on chain 5
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[3] is inf, but must be finite!     3
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 41.1768 seconds (Warm-up)
               118.819 seconds (Sampling)
               159.996 seconds (Total)

The following numerical problems occured the indicated number of times on chain 4
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     8
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 43.3197 seconds (Warm-up)
               118.377 seconds (Sampling)
               161.696 seconds (Total)

The following numerical problems occured the indicated number of times on chain 3
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     8
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 38.398 seconds (Warm-up)
               141.714 seconds (Sampling)
               180.112 seconds (Total)

The following numerical problems occured the indicated number of times on chain 1
                                                                                            count
Exception thrown at line 139: lognormal_log: Scale parameter[1] is inf, but must be finite!     7
Exception thrown at line 128: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.
NULL
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                        mean se_mean    sd     2.5%      25%      50%      75%
loc_detect             -7.17    0.00  0.31    -7.91    -7.34    -7.12    -6.95
scale_detect            1.65    0.00  0.34     1.14     1.42     1.60     1.83
loc_surface[1]         24.76    0.04  5.34    13.69    21.39    24.94    28.35
loc_surface[2]         16.71    0.09 10.10    -3.51     9.90    16.98    23.80
loc_surface[3]          9.50    0.05  5.54    -2.33     6.57     9.32    12.46
scale_surface[1]        7.03    0.01  1.81     4.41     5.83     6.74     7.89
scale_surface[2]       15.08    0.04  5.60     6.25    11.21    14.24    18.18
scale_surface[3]        7.65    0.04  5.28     1.84     3.91     6.07     9.89
intercept[1]           -4.78    0.00  0.20    -5.16    -4.91    -4.78    -4.64
intercept[2]           -5.88    0.00  0.21    -6.29    -6.02    -5.88    -5.74
intercept[3]           -5.59    0.00  0.19    -5.96    -5.71    -5.58    -5.46
b_depth[1]             -0.51    0.00  0.30    -1.11    -0.71    -0.50    -0.30
b_depth[2]             -0.17    0.00  0.24    -0.72    -0.30    -0.14     0.00
b_depth[3]             -0.47    0.00  0.15    -0.79    -0.56    -0.46    -0.36
sig_tube                0.78    0.00  0.10     0.60     0.71     0.77     0.84
sigma[1]                1.76    0.00  0.07     1.63     1.71     1.76     1.80
sigma[2]                1.79    0.00  0.08     1.64     1.74     1.79     1.85
sigma[3]                1.55    0.00  0.06     1.43     1.51     1.55     1.59
crop_tot[1]             1.61    0.01  0.78     0.83     1.15     1.41     1.81
crop_tot[2]             0.41    0.00  0.14     0.25     0.33     0.39     0.46
crop_tot[3]             0.63    0.00  0.15     0.40     0.52     0.61     0.71
crop_tot_diff[1]       -1.20    0.01  0.79    -3.23    -1.42    -1.01    -0.74
crop_tot_diff[2]       -0.98    0.01  0.79    -3.03    -1.20    -0.80    -0.52
crop_int_diff[1]       -1.10    0.00  0.29    -1.67    -1.29    -1.10    -0.91
crop_int_diff[2]       -0.81    0.00  0.27    -1.36    -0.99    -0.81    -0.62
crop_bdepth_diff[1]     0.34    0.00  0.37    -0.41     0.09     0.34     0.59
crop_bdepth_diff[2]     0.04    0.00  0.33    -0.61    -0.18     0.04     0.27
lp__                -1807.77    0.11  7.83 -1823.79 -1812.90 -1807.49 -1802.29
                       97.5% n_eff Rhat
loc_detect             -6.68  7054    1
scale_detect            2.45  6554    1
loc_surface[1]         34.70 14149    1
loc_surface[2]         35.54 13082    1
loc_surface[3]         21.20 10984    1
scale_surface[1]       11.34 14753    1
scale_surface[2]       28.27 20000    1
scale_surface[3]       21.76 15618    1
intercept[1]           -4.38  7248    1
intercept[2]           -5.46  6915    1
intercept[3]           -5.22  5414    1
b_depth[1]              0.06 13171    1
b_depth[2]              0.23 10645    1
b_depth[3]             -0.19 15586    1
sig_tube                0.98  9120    1
sigma[1]                1.90 20000    1
sigma[2]                1.97 20000    1
sigma[3]                1.67 20000    1
crop_tot[1]             3.65 12713    1
crop_tot[2]             0.71  8111    1
crop_tot[3]             0.99  6709    1
crop_tot_diff[1]       -0.36 12538    1
crop_tot_diff[2]       -0.12 12382    1
crop_int_diff[1]       -0.54  7168    1
crop_int_diff[2]       -0.27  6212    1
crop_bdepth_diff[1]     1.06 13941    1
crop_bdepth_diff[2]     0.70 13843    1
lp__                -1793.28  5088    1

Samples were drawn using NUTS(diag_e) at Thu Jan 12 17:48:19 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff
y_pred[1]             0.01    0.00 0.04  0.00  0.00  0.00  0.00  0.05 20000
y_pred[15]            0.03    0.00 0.23  0.00  0.00  0.00  0.01  0.20 20000
y_pred[28]            0.01    0.00 0.10  0.00  0.00  0.00  0.01  0.09 20000
mu_pred[1]           -5.18    0.01 1.31 -7.52 -6.06 -5.25 -4.38 -2.36 12517
mu_pred[15]          -4.23    0.01 0.88 -5.97 -4.83 -4.23 -3.64 -2.49 15049
mu_pred[28]          -5.79    0.01 0.82 -7.43 -6.33 -5.78 -5.26 -4.18 17304
mu_obs_pred[1]       -6.69    0.01 0.99 -8.61 -7.35 -6.68 -6.04 -4.74 15715
mu_obs_pred[15]      -5.29    0.01 0.83 -6.93 -5.84 -5.29 -4.74 -3.65 17484
mu_obs_pred[28]      -5.99    0.01 0.81 -7.62 -6.52 -5.98 -5.46 -4.39 17640
detect_odds_pred[1]   0.56    0.00 0.14  0.28  0.47  0.57  0.66  0.82 16532
detect_odds_pred[15]  0.75    0.00 0.10  0.53  0.69  0.76  0.82  0.90 18476
detect_odds_pred[28]  0.66    0.00 0.11  0.42  0.59  0.67  0.74  0.85 17666
pred_tot[1]           0.56    0.00 0.60  0.08  0.23  0.39  0.68  2.05 17437
                     Rhat
y_pred[1]               1
y_pred[15]              1
y_pred[28]              1
mu_pred[1]              1
mu_pred[15]             1
mu_pred[28]             1
mu_obs_pred[1]          1
mu_obs_pred[15]         1
mu_obs_pred[28]         1
detect_odds_pred[1]     1
detect_odds_pred[15]    1
detect_odds_pred[28]    1
pred_tot[1]             1

Samples were drawn using NUTS(diag_e) at Thu Jan 12 17:48:19 2017.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "mean of depth: 62.479797979798"

mean of log(nonzero root volume): -5.412056 

RMSE of mu_obs vs log observed (zeroes excluded):  1.649615 
RMSE/var:  0.4572626 

ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
Warning message:
Removed 400 rows containing non-finite values (stat_smooth). 
null device 
          1 

real	3m58.655s
user	14m23.058s
sys	0m6.239s
Extracting fits
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.14.1, packaged: 2016-12-28 14:55:41 UTC, GitRev: 5fa1e80eb817)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Joining, by = c("term", "estimate", "std.error", "rhat", "ess")
Joining, by = "crop_num"
Joining, by = "parameter"
